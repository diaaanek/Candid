[
  {
    " What does a doctype do?": "DOCTYPEs are required for legacy reasons. When omitted, browsers tend to use a different rendering mode that is incompatible with some specifications. Including the DOCTYPE in a document ensures that the browser makes a best-effort attempt at following the relevant specifications."
  },
  {
    " What does semantic mean to you": "A semantic element clearly describes its meaning to both the browser and the developer. Examples of non-semantic elements: <div> and <span> - Tells nothing about its content. Examples of semantic elements: <form>, <table>, and <article> - Clearly defines its content."
  },
  {
    " When would you use a div tag vs section,article,main,header,footer,aside,nav?": "The <div> element is often used as a container for other HTML elements to style them with CSS or to perform certain tasks with JavaScript."
  },
  {
    " What is the difference between classes and IDs in CSS?": "an ID can be used to identify one element, whereas a class can be used to identify more than one."
  },
  {
    " What are the components that make up the CSS box model.": "Content, Padding, Border, Margin"
  },
  {
    " What are some ways that inline elements are different from block level elements?": "Block level elements are usually higher order, parent elements in HTML"
  },
  { " How do you center a block level element?": "margin: 0 auto;" },
  {
    " What are media queries?": "Media queries are a CSS3 module allowing content rendering to adapt to conditions such as screen resolution (e.g. smartphone screen vs. computer screen)."
  },
  {
    " What does `* { box-sizing: border-box; }` do?": "Width and height apply to all parts of all elements: content, padding and borders:"
  },
  {
    " What is CSS selector specificity and how does it work?": "A CSS selector is the part of a CSS rule set that actually selects the content you want to style."
  },
  {
    " What's the difference between resetting and normalizing CSS?": "CSS resets aim to remove all built-in browser styling. Normalize.css is a small CSS file that provides better cross-browser consistency in the default styling of HTML elements."
  },
  {
    " What is the Z-Index?": "The z-index property specifies the stack order of an element."
  },
  {
    " What is block format context": "It is the region in which the layout of block boxes occurs and in which floats interact with other elements. "
  },
  {
    "  What are the various clearing techniques and which is appropriate for what context?": "Float left, float right"
  },
  {
    " How would you approach fixing browser-specific styling issues?": "Use a separate stylesheet that only loads when that specific browser is being used. Thankfully, the days of IE specific stylesheets are almost gone."
  },
  {
    " give an example of an @media property other than screen?": "Screen, Print, speech, and all"
  },
  {
    " What is Git and why should you use it": "Git is a version control system for tracking changes in computer files and coordinating work on those files among multiple people."
  },
  {
    " What's the difference between Git and GitHub?": "Git is a revision control system, a tool to manage your source code history. GitHub is a hosting service for Git repositories."
  },
  {
    " What's a typical use case for anonymous functions in JavaScript?": "Pass them as arguments to other functions."
  },
  {
    " What's the difference between a variable that is: null, undefined or undeclared?": "undefined is a variable that has been declared but no value exists and is a type of itself ‘undefined’. null is a value of a variable and is a type of object. undeclared variables is a variable that has been declared without ‘var’, 'let', or 'const' keyword."
  },
  {
    "  What is the difference between Map and forEach": " the forEach() method doesn't actually return anything (undefined). It simply calls a provided function on each element in your array. ... The difference is that map() utilizes return values and actually returns a new Array of the same size."
  },
  {
    " What's the difference between JS and jQuery?": "JavaScript is a scripting language which is used within a browser for interface interactions. JQuery is a library of Javascript that simplifies event handling, animations etc. The only difference is that jQuery has been optimized to perform many common scripting functions in fewer lines of codes."
  },
  {
    " Why would you use Event Delegation over Event Listeners": "When an element in the DOM is clicked, the event bubbles all the way up to the parent element (the document and then the window). This allows you to listen for events on the parent item and still detect clicks that happen inside it. Event delegation improves web performance and dynamically renders element."
  },
  {
    "  What is hoisting? How does it work?": "Hoisting is the JavaScript interpreter's action of moving all variable and function declarations to the top of the current scope. However, only the actual declarations are hoisted. Any assignments are left where they are."
  },
  {
    "What is prototypal inheritance? How does it work?": "In JavaScript, class inheritance is implemented on top of prototypal inheritance, but that does not mean that it does the same thing: JavaScript's class inheritance uses the prototype chain to wire the child `Constructor.prototype` to the parent `Constructor.prototype` for delegation."
  },
  {
    " What is AJAX and How do we use it?": "AJAX stands for Asynchronous JavaScript and XML. AJAX is a new technique for creating better, faster, and more interactive web applications with the help of XML, HTML, CSS, and Java Script. Ajax uses XHTML for content, CSS for presentation, along with Document Object Model and JavaScript for dynamic content display."
  },
  {
    "What tools and techniques have you used when debugging JavaScript?": "A few sample tools and techniques include (1) The console.log() method; (2) Setting Breakpoints; and (3) debugger method"
  },
  {
    "How do methods differ from functions?": "A function is a piece of code that is called by name. It can be passed data to operate on (i.e. the parameters) and can optionally return data (the return value). All data that is passed to a function is explicitly passed. A method is a piece of code that is called by a name that is associated with an object. In most respects it is identical to a function except for two key differences: (1) A method is implicitly passed the object on which it was called. (2) A method is able to operate on data that is contained within the class (remembering that an object is an instance of a class - the class is the definition, the object is an instance of that data)."
  },
  {
    "What is the difference between attributes and properties?": "Attributes are in the HTML itself, rather than in the DOM. Properties are part of the DOM Object"
  },
  {
    "What is Graph QL?": "GraphQL is a query language for APIs and a runtime for fulfilling those queries with existing data"
  },

  {
    "What happens when you type a URL into your browser and hit enter?": "1. Type URL in address bar 2. The browser checks the cache for a DNS record to find the corresponding IP address of url 3. If the requested URL is not in the cache, ISP’s DNS server initiates a DNS query to find the IP address of the server that hosts the url 4. Browser initiates a TCP connection with the server. 5. The browser sends an HTTP request to the web server. 6. The server handles the request and sends back a response. 7. The server sends out an HTTP response 8. The browser displays the HTML content (for HTML responses which is the most common)."
  },
  {
    "What methods are supported by REST?": "GET, PUT, DELETE, POST, HEAD"
  },
  {
    "What's the difference between a PUT and a POST request?": "PUT is idempotent, POST is not idempotent. For an operation (or service call) to be idempotent, clients can make that same call repeatedly while producing the same result."
  },

  {
    "What is middleware?": "Middleware functions are functions that have access to the request object (req), the response object (res), and the next middleware function in the application’s request-response cycle. The next middleware function is commonly denoted by a variable named next."
  },

  { "Is Node primarily a sync or async programing language?": "" },
  {
    "What are some differences between a SQL database and a NoSQL database?": ""
  },

  {
    "What is the difference between =, ==, and ===?": "=== is strict comparison operator. == is abstract equality; not always dependent on type; = is an assignment operator"
  },
  {
    "What is Webpack?": "webpack is a module bundler. Its main purpose is to bundle JavaScript files for usage in a browser, yet it is also capable of transforming, bundling, or packaging just about any resource or asset."
  },
  {
    "How does the React eco-system work with the common MVC pattern that developers are used to?": "React is the VIEW in the MVC structure. When flux is incorporated, the flow of processing is unidirectional instead of bidirectional"
  },
  {
    "What is a component?": "Components let you split the UI into independent, reusable pieces, and think about each piece in isolation. There are Functional and Class Components that can be created in React"
  },
  {
    "How do you decide what goes into a single component? ": "The UI of an application should be broken down in a component hierarchy"
  },
  {
    "What does it mean when a component is stateful?": "The component has a state. Also, stateful components are always class components"
  },
  {
    "What is an example of a stateless/static component?": "A component that is more informational, as opposed to functional. Stateless components can take props as well and change as the props change"
  },
  {
    "What is JSX used for, and is it required?": "JSX is a Javascript syntax extension. It is used with React to describe what the UI should look like"
  },
  {
    "What are some differences between HTML and JSX?": "JSX is an HTML-like syntax for writing JavaScript related to the virtual DOM."
  },
  {
    "What happens during the lifecycle of a React component?": "The component may be destroyed, mounted, unmounted..."
  },
  {
    "Which method is always required inside a React component?": "Render"
  },
  {
    "What is the difference between state and props?": "Props are usually passed down to a child component from a parent component. The state of one component will often become the props of a child component"
  },
  {
    "What is the virtual DOM?": "In React, for every DOM object, there is a corresponding virtual DOM object. A virtual DOM object is a representation of a DOM object, like a lightweight copy."
  },
  {
    "In a React application, where should you store the state?": "State should be stored in the constructor of a stateful component."
  },
  {
    "Using redux, what is the difference between an action and a reducer?": "Every time your application wants to change the state of the app, it should dispatch an action. Reducers are responsible for modifying the application state based on an action."
  },
  {
    "In React, a component's render method can only render a single root node.  Why?": "Applications built with just React usually have a single root DOM node. If you are integrating React into an existing app, you may have as many isolated root DOM nodes as you like."
  }
]
